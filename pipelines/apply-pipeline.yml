# Terraform Apply Pipeline for TRL Hub and Spoke Infrastructure
# Applies Terraform plans with proper approval gates and validation

trigger: none  # Manual trigger only for apply operations

pr: none  # No PR triggers for apply pipeline

variables:
  - group: trl-hubspoke-variables
  - name: terraformVersion
    value: '1.5.7'
  - name: azureSubscription
    value: 'trl-hubspoke-service-connection'

stages:
#================================================
# PRE-APPLY VALIDATION
#================================================
- stage: PreApplyValidation
  displayName: 'Pre-Apply Validation'
  jobs:
  - job: ValidatePrerequisites
    displayName: 'Validate Prerequisites'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Validate Azure Connectivity'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo ":) Validating Azure connectivity and permissions..."
          
          # Check subscription access
          az account show --output table
          
          # Verify Terraform backend access
          echo "Checking Terraform backend storage..."
          az storage account show \
            --name "trlhubspoketfstate" \
            --resource-group "trl-hubspoke-tfstate-rg" \
            --output table
          
          echo ":) Prerequisites validation completed"

#================================================
# HUB INFRASTRUCTURE APPLY
#================================================
- stage: ApplyHub
  displayName: 'Apply Hub Infrastructure'
  dependsOn: PreApplyValidation
  condition: succeeded()
  jobs:
  - deployment: HubDeployment
    displayName: 'Deploy Hub Infrastructure'
    environment: 'trl-hubspoke-hub-apply'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Apply Hub Infrastructure'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo ":) Applying Hub infrastructure..."
                cd workspaces/hub
                
                # Initialize Terraform
                terraform init
                
                # Create fresh plan
                TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                PLAN_FILE="hub_apply_${TIMESTAMP}.out"
                
                echo "|) Creating deployment plan..."
                terraform plan -out="${PLAN_FILE}"
                
                # Show plan summary
                echo "|) Plan Summary:"
                terraform show -no-color "${PLAN_FILE}" | grep -E "Plan:|Changes to Outputs:" || true
                
                # Apply the plan
                echo ":) Applying infrastructure changes..."
                terraform apply -auto-approve "${PLAN_FILE}"
                
                # Generate outputs
                terraform output -json > hub-outputs.json
                
                echo ":) Hub infrastructure deployment completed!"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Hub Outputs'
            inputs:
              targetPath: 'workspaces/hub/hub-outputs.json'
              artifact: 'hub-outputs'

#================================================
# MANAGEMENT INFRASTRUCTURE APPLY
#================================================
- stage: ApplyManagement
  displayName: 'Apply Management Infrastructure'
  dependsOn: ApplyHub
  condition: succeeded()
  jobs:
  - deployment: ManagementDeployment
    displayName: 'Deploy Management Infrastructure'
    environment: 'trl-hubspoke-management-apply'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Apply Management Infrastructure'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo ":) Applying Management infrastructure..."
                cd workspaces/management
                
                # Initialize Terraform
                terraform init
                
                # Create fresh plan
                TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                PLAN_FILE="mgmt_apply_${TIMESTAMP}.out"
                
                echo "|) Creating deployment plan..."
                terraform plan -out="${PLAN_FILE}"
                
                # Apply the plan
                echo ":) Applying infrastructure changes..."
                terraform apply -auto-approve "${PLAN_FILE}"
                
                echo ":) Management infrastructure deployment completed!"

#================================================
# DEVELOPMENT SPOKES APPLY
#================================================
- stage: ApplyDevSpokes
  displayName: 'Apply Development Spokes'
  dependsOn: ApplyHub
  condition: succeeded()
  jobs:
  - deployment: DevSpokesDeployment
    displayName: 'Deploy Development Spokes'
    environment: 'trl-hubspoke-dev-apply'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Apply Dev Spokes Infrastructure'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo ":) Applying Development spoke infrastructure..."
                cd workspaces/spokes/dev
                
                # Initialize Terraform
                terraform init
                
                # Create fresh plan
                TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                PLAN_FILE="dev_apply_${TIMESTAMP}.out"
                
                echo "|) Creating deployment plan..."
                terraform plan -out="${PLAN_FILE}"
                
                # Apply the plan
                echo ":) Applying infrastructure changes..."
                terraform apply -auto-approve "${PLAN_FILE}"
                
                # Generate outputs
                terraform output -json > dev-outputs.json
                
                echo ":) Development spoke infrastructure deployment completed!"

#================================================
# STAGING SPOKES APPLY
#================================================
- stage: ApplyStaging
  displayName: 'Apply Staging Spokes'
  dependsOn:
  - ApplyHub
  - ApplyDevSpokes
  condition: succeeded()
  jobs:
  - deployment: StagingSpokesDeployment
    displayName: 'Deploy Staging Spokes'
    environment: 'trl-hubspoke-staging-apply'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Apply Staging Spokes Infrastructure'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo ":) Applying Staging spoke infrastructure..."
                cd workspaces/spokes/staging
                
                # Initialize Terraform
                terraform init
                
                # Create fresh plan
                TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                PLAN_FILE="staging_apply_${TIMESTAMP}.out"
                
                echo "|) Creating deployment plan..."
                terraform plan -out="${PLAN_FILE}"
                
                # Apply the plan
                echo ":) Applying infrastructure changes..."
                terraform apply -auto-approve "${PLAN_FILE}"
                
                # Generate outputs
                terraform output -json > staging-outputs.json
                
                echo ":) Staging spoke infrastructure deployment completed!"

#================================================
# PRODUCTION APPROVAL GATE
#================================================
- stage: ProductionApproval
  displayName: 'Production Deployment Approval'
  dependsOn: ApplyStaging
  condition: succeeded()
  jobs:
  - deployment: ProductionApprovalGate
    displayName: 'Production Deployment Approval'
    environment: 'trl-hubspoke-production-approval'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo ":| Production Deployment Approval Required"
              echo ""
              echo ":( CRITICAL: You are about to deploy to PRODUCTION environment"
              echo ""
              echo "|) Pre-deployment Checklist:"
              echo "   :) Hub infrastructure deployed successfully"
              echo "   :) Management infrastructure deployed successfully"
              echo "   :) Development environment tested"
              echo "   :) Staging environment validated"
              echo "   :) Security scans completed"
              echo "   :) Cost impact reviewed"
              echo ""
              echo ":) Ready for production deployment"
            displayName: 'Production Approval Checkpoint'

#================================================
# PRODUCTION SPOKES APPLY
#================================================
- stage: ApplyProduction
  displayName: 'Apply Production Spokes'
  dependsOn: ProductionApproval
  condition: succeeded()
  jobs:
  - deployment: ProductionSpokesDeployment
    displayName: 'Deploy Production Spokes'
    environment: 'trl-hubspoke-production-apply'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: AzureCLI@2
            displayName: 'Apply Production Spokes Infrastructure'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo ":) Applying Production spoke infrastructure..."
                cd workspaces/spokes/prod
                
                # Initialize Terraform
                terraform init
                
                # Create fresh plan
                TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
                PLAN_FILE="prod_apply_${TIMESTAMP}.out"
                
                echo "|) Creating deployment plan..."
                terraform plan -out="${PLAN_FILE}"
                
                # Show plan summary for final review
                echo "|) Production Plan Summary:"
                terraform show -no-color "${PLAN_FILE}" | grep -E "Plan:|Changes to Outputs:" || true
                
                # Apply the plan
                echo ":) Applying production infrastructure changes..."
                terraform apply -auto-approve "${PLAN_FILE}"
                
                # Generate outputs
                terraform output -json > prod-outputs.json
                
                echo ":) Production spoke infrastructure deployment completed!"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Production Outputs'
            inputs:
              targetPath: 'workspaces/spokes/prod/prod-outputs.json'
              artifact: 'prod-outputs'

#================================================
# POST-DEPLOYMENT VALIDATION
#================================================
- stage: PostDeploymentValidation
  displayName: 'Post-Deployment Validation'
  dependsOn: ApplyProduction
  condition: succeeded()
  jobs:
  - job: ValidateDeployment
    displayName: 'Validate Infrastructure Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Validate Deployed Infrastructure'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo ":) Validating deployed infrastructure..."
          
          # Validate hub infrastructure
          echo "|) Hub Infrastructure Status:"
          az network vnet list --resource-group trl-hubspoke-prod-rg-hub --output table
          az network firewall list --resource-group trl-hubspoke-prod-rg-hub --output table
          az network bastion list --resource-group trl-hubspoke-prod-rg-hub --output table
          az keyvault list --resource-group trl-hubspoke-prod-rg-hub --output table
          
          # Validate spoke infrastructure
          echo ""
          echo "|) Spoke Infrastructure Status:"
          for env in dev staging prod; do
            echo "Environment: $env"
            az network vnet list --resource-group "trl-hubspoke-${env}-rg-spoke1" --output table 2>/dev/null || echo "  No spoke1 resources found for $env"
            az vm list --resource-group "trl-hubspoke-${env}-rg-spoke1" --output table 2>/dev/null || echo "  No VMs found for $env"
          done
          
          # Check Key Vault accessibility
          echo ""
          echo ":) Testing Key Vault accessibility..."
          KV_NAME=$(az keyvault list --resource-group trl-hubspoke-prod-rg-hub --query "[0].name" -o tsv)
          if [ -n "$KV_NAME" ]; then
            az keyvault secret list --vault-name "$KV_NAME" --output table || echo "  Key Vault access test completed"
          fi
          
          echo ""
          echo ":) Infrastructure validation completed successfully!"

  - job: ConnectivityTest
    displayName: 'Test Network Connectivity'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Test Network Connectivity'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo ":) Testing network connectivity..."
          
          # Test firewall configuration
          echo "Testing Azure Firewall configuration..."
          FW_NAME=$(az network firewall list --resource-group trl-hubspoke-prod-rg-hub --query "[0].name" -o tsv)
          if [ -n "$FW_NAME" ]; then
            az network firewall show --name "$FW_NAME" --resource-group trl-hubspoke-prod-rg-hub --query "provisioningState" -o tsv
          fi
          
          # Test private DNS zones
          echo ""
          echo "Testing Private DNS zones..."
          az network private-dns zone list --resource-group trl-hubspoke-prod-rg-hub --output table
          
          # Test VNet peering
          echo ""
          echo "Testing VNet peering..."
          az network vnet peering list --resource-group trl-hubspoke-prod-rg-hub --vnet-name trl-hubspoke-prod-vnet-hub --output table
          
          echo ""
          echo ":) Network connectivity tests completed!"

#================================================
# DEPLOYMENT SUMMARY
#================================================
- stage: DeploymentSummary
  displayName: 'Deployment Summary'
  dependsOn: PostDeploymentValidation
  condition: succeeded()
  jobs:
  - job: GenerateDeploymentReport
    displayName: 'Generate Deployment Summary'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo ":) TRL Hub and Spoke Infrastructure Deployment Completed!"
        echo "=========================================================="
        echo ""
        echo ":) Successfully Deployed Components:"
        echo "   - Hub Infrastructure (Firewall, Bastion, Key Vault)"
        echo "   - Management Infrastructure (Monitoring, Governance)"
        echo "   - Development Spoke Environment"
        echo "   - Staging Spoke Environment"
        echo "   - Production Spoke Environment"
        echo ""
        echo ":| Security Features Deployed:"
        echo "   - Azure Firewall with centralized traffic control"
        echo "   - Azure Bastion for secure VM access"
        echo "   - Private endpoints for all PaaS services"
        echo "   - Key Vault for centralized secret management"
        echo "   - Private DNS zones for internal resolution"
        echo ""
        echo ":) Network Topology:"
        echo "   - Hub VNet (10.0.0.0/16) with shared services"
        echo "   - Spoke VNets (10.1.0.0/16, 10.2.0.0/16) for workloads"
        echo "   - VNet peering connecting hub and spokes"
        echo "   - Route tables directing traffic through firewall"
        echo ""
        echo ":) Cost Optimization:"
        echo "   - Free tier VMs with auto-shutdown (dev/staging)"
        echo "   - LRS storage for non-production environments"
        echo "   - GRS storage for production data protection"
        echo "   - Monitoring enabled for cost tracking"
        echo ""
        echo "|) Next Steps:"
        echo "   1. Access VMs through Azure Bastion"
        echo "   2. Deploy applications to spoke environments"
        echo "   3. Configure monitoring and alerting"
        echo "   4. Review and optimize costs regularly"
        echo ""
        echo ":) Access Information:"
        echo "   - Azure Portal: https://portal.azure.com"
        echo "   - Bastion Host: Available in hub resource group"
        echo "   - Key Vault: Contains all deployment secrets"
        echo ""
        echo ":) Deployment completed successfully!"
      displayName: 'Deployment Summary Report'
