# Infrastructure Validation Template
# Reusable template for validating deployed infrastructure

parameters:
  - name: environmentName
    type: string
  - name: serviceConnection
    type: string
  - name: subscriptionName
    type: string

steps:
- task: AzureCLI@2
  displayName: 'Validate ${{ parameters.environmentName }} Network Infrastructure'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo ":) Validating ${{ parameters.environmentName }} network infrastructure..."
      
      # Set subscription context
      az account set --subscription "${{ parameters.subscriptionName }}"
      
      # Validate VNets
      echo "|) Checking Virtual Networks..."
      VNETS=$(az network vnet list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{Name:name, ResourceGroup:resourceGroup, State:provisioningState}" -o table)
      echo "$VNETS"
      
      # Validate VNet Peering
      echo "|) Checking VNet Peering..."
      HUB_VNET=$(az network vnet list --query "[?contains(name, 'hub')].name" -o tsv | head -1)
      if [ -n "$HUB_VNET" ]; then
        HUB_RG=$(az network vnet list --query "[?contains(name, 'hub')].resourceGroup" -o tsv | head -1)
        az network vnet peering list --resource-group "$HUB_RG" --vnet-name "$HUB_VNET" --output table
      fi
      
      echo ":) Network validation completed"

- task: AzureCLI@2
  displayName: 'Validate ${{ parameters.environmentName }} Security Infrastructure'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo ":) Validating ${{ parameters.environmentName }} security infrastructure..."
      
      # Validate Firewall (only check if hub environment)
      if [[ "${{ parameters.environmentName }}" == *"hub"* ]] || [[ "${{ parameters.environmentName }}" == "prod" ]]; then
        echo "|) Checking Azure Firewall..."
        az network firewall list --query "[].{Name:name, ResourceGroup:resourceGroup, State:provisioningState}" -o table
        
        echo "|) Checking Azure Bastion..."
        az network bastion list --query "[].{Name:name, ResourceGroup:resourceGroup, State:provisioningState}" -o table
      fi
      
      # Validate Key Vaults
      echo "|) Checking Key Vaults..."
      az keyvault list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{Name:name, ResourceGroup:resourceGroup, VaultUri:properties.vaultUri}" -o table
      
      # Validate Private Endpoints
      echo "|) Checking Private Endpoints..."
      az network private-endpoint list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{Name:name, ResourceGroup:resourceGroup, State:provisioningState}" -o table
      
      echo ":) Security validation completed"

- task: AzureCLI@2
  displayName: 'Validate ${{ parameters.environmentName }} Compute Infrastructure'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo ":) Validating ${{ parameters.environmentName }} compute infrastructure..."
      
      # Validate VMs
      echo "|) Checking Virtual Machines..."
      az vm list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{Name:name, ResourceGroup:resourceGroup, PowerState:instanceView.statuses[1].displayStatus, Size:hardwareProfile.vmSize}" -o table
      
      # Check VM extensions
      echo "|) Checking VM Extensions..."
      VMS=$(az vm list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{name:name, resourceGroup:resourceGroup}" -o tsv)
      while IFS=$'\t' read -r vm_name rg_name; do
        if [ -n "$vm_name" ]; then
          echo "  Extensions for $vm_name:"
          az vm extension list --vm-name "$vm_name" --resource-group "$rg_name" --query "[].{Name:name, State:provisioningState}" -o table
        fi
      done <<< "$VMS"
      
      echo ":) Compute validation completed"

- task: AzureCLI@2
  displayName: 'Validate ${{ parameters.environmentName }} Storage and Database'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo ":) Validating ${{ parameters.environmentName }} storage and database..."
      
      # Validate Storage Accounts
      echo "|) Checking Storage Accounts..."
      az storage account list --query "[?starts_with(name, 'trl') && contains(name, '${{ parameters.environmentName }}')].{Name:name, ResourceGroup:resourceGroup, Kind:kind, AccessTier:accessTier}" -o table
      
      # Validate SQL Servers
      echo "|) Checking SQL Servers..."
      az sql server list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{Name:name, ResourceGroup:resourceGroup, State:state, Version:version}" -o table
      
      # Validate SQL Databases
      echo "|) Checking SQL Databases..."
      SQL_SERVERS=$(az sql server list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{name:name, resourceGroup:resourceGroup}" -o tsv)
      while IFS=$'\t' read -r server_name rg_name; do
        if [ -n "$server_name" ]; then
          echo "  Databases in $server_name:"
          az sql db list --server "$server_name" --resource-group "$rg_name" --query "[].{Name:name, Status:status, ServiceTier:currentServiceObjectiveName}" -o table
        fi
      done <<< "$SQL_SERVERS"
      
      # Validate Cosmos DB (if enabled)
      echo "|) Checking Cosmos DB..."
      az cosmosdb list --query "[?starts_with(name, 'trl-hubspoke-${{ parameters.environmentName }}')].{Name:name, ResourceGroup:resourceGroup, Kind:kind}" -o table
      
      echo ":) Storage and database validation completed"
