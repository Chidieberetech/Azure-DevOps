# VM Password Rotation Pipeline for TRL Hub and Spoke Infrastructure
# Automatically rotates VM passwords across all environments

trigger: none  # Manual trigger only for password rotation

# Scheduled rotation every quarter
schedules:
- cron: "0 2 1 */3 *"  # First day of quarter at 2 AM UTC
  displayName: Quarterly password rotation
  branches:
    include:
    - main
  always: false

variables:
  - group: trl-hubspoke-common-variables
  - name: rotationTimestamp
    value: $[format('{0:yyyy}-{0:MM}-{0:dd}-{0:HH}{0:mm}', pipeline.startTime)]

stages:
#================================================
# PRE-ROTATION VALIDATION
#================================================
- stage: PreRotationValidation
  displayName: 'Pre-Rotation Validation'
  jobs:
  - job: ValidatePrerequisites
    displayName: 'Validate Prerequisites'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Validate Access to All Subscriptions'
      inputs:
        azureSubscription: 'trl-hubspoke-dev-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo ":) Validating access to all subscriptions..."
          
          # Test development subscription
          az account show --subscription "Sub-TRL-dev-weu" --output table
          
          # Test staging subscription  
          az account show --subscription "Sub-TRL-int-weu" --output table
          
          # Test production subscription
          az account show --subscription "Sub-TRL-prod-weu" --output table
          
          echo ":) All subscription access validated"

    - task: AzureCLI@2
      displayName: 'Validate Key Vault Access'
      inputs:
        azureSubscription: 'trl-hubspoke-dev-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo ":) Validating Key Vault access..."
          
          # Find and test Key Vaults
          DEV_KV=$(az keyvault list --subscription "Sub-TRL-dev-weu" --query "[?starts_with(name, 'trl-hubspoke-dev-kv')].name" -o tsv | head -1)
          STAGING_KV=$(az keyvault list --subscription "Sub-TRL-int-weu" --query "[?starts_with(name, 'trl-hubspoke-staging-kv')].name" -o tsv | head -1)
          PROD_KV=$(az keyvault list --subscription "Sub-TRL-prod-weu" --query "[?starts_with(name, 'trl-hubspoke-prod-kv')].name" -o tsv | head -1)
          
          echo "Development Key Vault: $DEV_KV"
          echo "Staging Key Vault: $STAGING_KV"
          echo "Production Key Vault: $PROD_KV"
          
          # Test secret access
          if [ -n "$DEV_KV" ]; then
            az keyvault secret list --vault-name "$DEV_KV" --maxresults 1 >/dev/null
            echo ":) Development Key Vault access confirmed"
          fi
          
          echo ":) Key Vault access validation completed"

#================================================
# DEVELOPMENT PASSWORD ROTATION
#================================================
- stage: RotateDevPasswords
  displayName: 'Rotate Development VM Passwords'
  dependsOn: PreRotationValidation
  condition: succeeded()
  jobs:
  - deployment: RotateDevVMPasswords
    displayName: 'Rotate Dev Environment Passwords'
    environment: 'trl-hubspoke-dev-password-rotation'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Rotate Development VM Passwords'
            inputs:
              azureSubscription: 'trl-hubspoke-dev-connection'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: 'scripts/vm-password-rotation.sh'
              arguments: '-s "Sub-TRL-dev-weu" -e dev -f'

#================================================
# STAGING PASSWORD ROTATION
#================================================
- stage: RotateStagingPasswords
  displayName: 'Rotate Staging VM Passwords'
  dependsOn: RotateDevPasswords
  condition: succeeded()
  jobs:
  - deployment: RotateStagingVMPasswords
    displayName: 'Rotate Staging Environment Passwords'
    environment: 'trl-hubspoke-staging-password-rotation'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Rotate Staging VM Passwords'
            inputs:
              azureSubscription: 'trl-hubspoke-staging-connection'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: 'scripts/vm-password-rotation.sh'
              arguments: '-s "Sub-TRL-int-weu" -e staging -f'

#================================================
# PRODUCTION APPROVAL GATE
#================================================
- stage: ProductionPasswordApproval
  displayName: 'Production Password Rotation Approval'
  dependsOn: RotateStagingPasswords
  condition: succeeded()
  jobs:
  - deployment: ProductionPasswordApprovalGate
    displayName: 'Production Password Rotation Approval'
    environment: 'trl-hubspoke-production-password-approval'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo ":| Production VM Password Rotation Approval Required"
              echo ""
              echo ":( CRITICAL: You are about to rotate passwords in PRODUCTION"
              echo ""
              echo "|) Pre-rotation checklist:"
              echo "   :) Development passwords rotated successfully"
              echo "   :) Staging passwords rotated successfully"
              echo "   :) No active maintenance windows"
              echo "   :) Change management approval obtained"
              echo "   :) Rollback plan prepared"
              echo ""
              echo ":) Ready for production password rotation"
            displayName: 'Production Password Rotation Approval'

#================================================
# PRODUCTION PASSWORD ROTATION
#================================================
- stage: RotateProductionPasswords
  displayName: 'Rotate Production VM Passwords'
  dependsOn: ProductionPasswordApproval
  condition: succeeded()
  jobs:
  - deployment: RotateProductionVMPasswords
    displayName: 'Rotate Production Environment Passwords'
    environment: 'trl-hubspoke-production-password-rotation'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Rotate Production VM Passwords'
            inputs:
              azureSubscription: 'trl-hubspoke-prod-connection'
              scriptType: 'bash'
              scriptLocation: 'scriptPath'
              scriptPath: 'scripts/vm-password-rotation.sh'
              arguments: '-s "Sub-TRL-prod-weu" -e prod -f'

#================================================
# POST-ROTATION VALIDATION
#================================================
- stage: PostRotationValidation
  displayName: 'Post-Rotation Validation'
  dependsOn: RotateProductionPasswords
  condition: succeeded()
  jobs:
  - job: ValidatePasswordRotation
    displayName: 'Validate Password Rotation'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Validate New Passwords'
      inputs:
        azureSubscription: 'trl-hubspoke-prod-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo ":) Validating password rotation results..."
          
          # Check Key Vault secret versions for each environment
          for env in dev staging prod; do
            case $env in
              dev) 
                SUBSCRIPTION="Sub-TRL-dev-weu"
                CONNECTION="trl-hubspoke-dev-connection"
                ;;
              staging)
                SUBSCRIPTION="Sub-TRL-int-weu" 
                CONNECTION="trl-hubspoke-staging-connection"
                ;;
              prod)
                SUBSCRIPTION="Sub-TRL-prod-weu"
                CONNECTION="trl-hubspoke-prod-connection"
                ;;
            esac
            
            echo "Checking $env environment..."
            
            # Find Key Vault for environment
            KV_NAME=$(az keyvault list --subscription "$SUBSCRIPTION" --query "[?starts_with(name, 'trl-hubspoke-${env}-kv')].name" -o tsv | head -1)
            
            if [ -n "$KV_NAME" ]; then
              # Check if vm-admin-password secret was updated today
              SECRET_DATE=$(az keyvault secret show --vault-name "$KV_NAME" --name "vm-admin-password" --query "attributes.updated" -o tsv)
              echo "  Secret last updated: $SECRET_DATE"
              
              # Verify backup secret exists
              az keyvault secret show --vault-name "$KV_NAME" --name "vm-admin-password-backup" >/dev/null 2>&1 && echo "  :) Backup secret exists" || echo "  :| No backup secret found"
            else
              echo "  :( Key Vault not found for $env"
            fi
          done
          
          echo ""
          echo ":) Password rotation validation completed"

  - job: ConnectivityTest
    displayName: 'Test VM Connectivity'
    dependsOn: ValidatePasswordRotation
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo ":) Testing VM connectivity after password rotation..."
        echo ""
        echo "|) Post-rotation connectivity checklist:"
        echo "   1. Test Azure Bastion connectivity to VMs"
        echo "   2. Verify applications can authenticate"
        echo "   3. Check automated backup jobs"
        echo "   4. Validate monitoring agent connectivity"
        echo ""
        echo "|) Manual verification required:"
        echo "   - Connect to each VM via Azure Bastion"
        echo "   - Verify services are running normally"
        echo "   - Test application functionality"
        echo "   - Update any hardcoded credentials in applications"
        echo ""
        echo ":) Connectivity testing guidance provided"
      displayName: 'Connectivity Test Instructions'

#================================================
# ROTATION SUMMARY AND NOTIFICATION
#================================================
- stage: RotationSummary
  displayName: 'Password Rotation Summary'
  dependsOn: PostRotationValidation
  condition: succeeded()
  jobs:
  - job: GenerateRotationReport
    displayName: 'Generate Rotation Summary Report'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo ":) VM Password Rotation Summary Report"
        echo "========================================"
        echo ""
        echo ":) Rotation completed on: $(date -u)"
        echo ":) Rotation ID: $(rotationTimestamp)"
        echo ""
        echo "|) Environments processed:"
        echo "   - Development (Sub-TRL-dev-weu)"
        echo "   - Staging (Sub-TRL-int-weu)"  
        echo "   - Production (Sub-TRL-prod-weu)"
        echo ""
        echo ":) Security improvements:"
        echo "   - All VM passwords updated with 16-character secure passwords"
        echo "   - Passwords stored in respective Key Vaults"
        echo "   - Backup copies created for rollback purposes"
        echo "   - Rotation timestamps recorded for audit trail"
        echo ""
        echo "|) Next scheduled rotation:"
        echo "   - Automatic: First day of next quarter at 2 AM UTC"
        echo "   - Manual: Run this pipeline anytime for immediate rotation"
        echo ""
        echo "|) Post-rotation actions required:"
        echo "   1. Notify application teams of password changes"
        echo "   2. Update any hardcoded credentials in applications"
        echo "   3. Test critical business applications"
        echo "   4. Verify backup and monitoring systems"
        echo ""
        echo ":) Password rotation completed successfully!"
      displayName: 'Password Rotation Summary'
