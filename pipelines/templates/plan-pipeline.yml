# Terraform Plan Pipeline for TRL Hub and Spoke Infrastructure
# Creates execution plans for infrastructure changes without applying them

trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
  paths:
    include:
    - modules/
    - workspaces/

pr:
  branches:
    include:
    - main
  paths:
    include:
    - modules/
    - workspaces/

variables:
  - group: trl-hubspoke-variables
  - name: terraformVersion
    value: '1.5.7'
  - name: azureSubscription
    value: 'trl-hubspoke-service-connection'

stages:
#================================================
# PLAN VALIDATION STAGE
#================================================
- stage: PlanValidation
  displayName: 'Plan Validation and Preparation'
  jobs:
  - job: ValidateConfiguration
    displayName: 'Validate Terraform Configuration'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - script: |
        echo ":) Validating Terraform configuration..."
        cd modules
        terraform init -backend=false
        terraform validate
        terraform fmt -check -recursive
        echo ":) Configuration validation completed"
      displayName: 'Validate Terraform Configuration'

#================================================
# HUB PLANNING STAGE
#================================================
- stage: PlanHub
  displayName: 'Plan Hub Infrastructure'
  dependsOn: PlanValidation
  condition: succeeded()
  jobs:
  - job: HubPlan
    displayName: 'Create Hub Infrastructure Plan'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Create Hub Plan'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "|) Creating Hub infrastructure plan..."
          cd workspaces/hub
          
          # Initialize Terraform
          terraform init
          
          # Create plan with detailed output
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          PLAN_FILE="hub_plan_${TIMESTAMP}.out"
          
          terraform plan \
            -detailed-exitcode \
            -out="${PLAN_FILE}" \
            -lock=true \
            -lock-timeout=300s
          
          PLAN_EXIT_CODE=$?
          
          # Generate human-readable plan
          terraform show -no-color "${PLAN_FILE}" > "hub_plan_${TIMESTAMP}.txt"
          terraform show -json "${PLAN_FILE}" > "hub_plan_${TIMESTAMP}.json"
          
          case $PLAN_EXIT_CODE in
            0)
              echo ":) No changes detected for Hub infrastructure"
              ;;
            1)
              echo ":( Hub plan failed with errors"
              exit 1
              ;;
            2)
              echo ":) Changes detected for Hub infrastructure"
              echo "Plan summary:"
              terraform show -no-color "${PLAN_FILE}" | grep -E "Plan:|Changes to Outputs:" || true
              ;;
          esac
          
          echo "Plan file created: ${PLAN_FILE}"

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Hub Plan'
      inputs:
        targetPath: 'workspaces/hub/'
        artifact: 'hub-plan'

#================================================
# MANAGEMENT PLANNING STAGE
#================================================
- stage: PlanManagement
  displayName: 'Plan Management Infrastructure'
  dependsOn: PlanValidation
  condition: succeeded()
  jobs:
  - job: ManagementPlan
    displayName: 'Create Management Infrastructure Plan'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Create Management Plan'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "|) Creating Management infrastructure plan..."
          cd workspaces/management
          
          # Initialize Terraform
          terraform init
          
          # Create plan with detailed output
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          PLAN_FILE="mgmt_plan_${TIMESTAMP}.out"
          
          terraform plan \
            -detailed-exitcode \
            -out="${PLAN_FILE}" \
            -lock=true \
            -lock-timeout=300s
          
          PLAN_EXIT_CODE=$?
          
          # Generate human-readable plan
          terraform show -no-color "${PLAN_FILE}" > "mgmt_plan_${TIMESTAMP}.txt"
          terraform show -json "${PLAN_FILE}" > "mgmt_plan_${TIMESTAMP}.json"
          
          case $PLAN_EXIT_CODE in
            0)
              echo ":) No changes detected for Management infrastructure"
              ;;
            1)
              echo ":( Management plan failed with errors"
              exit 1
              ;;
            2)
              echo ":) Changes detected for Management infrastructure"
              echo "Plan summary:"
              terraform show -no-color "${PLAN_FILE}" | grep -E "Plan:|Changes to Outputs:" || true
              ;;
          esac

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Management Plan'
      inputs:
        targetPath: 'workspaces/management/'
        artifact: 'management-plan'

#================================================
# SPOKE PLANNING STAGE
#================================================
- stage: PlanSpokes
  displayName: 'Plan Spoke Infrastructure'
  dependsOn: PlanValidation
  condition: succeeded()
  jobs:
  - job: SpokePlanning
    displayName: 'Create Spoke Infrastructure Plans'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        dev:
          environmentName: 'dev'
          displayName: 'Development'
        staging:
          environmentName: 'staging'
          displayName: 'Staging'
        prod:
          environmentName: 'prod'
          displayName: 'Production'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: $(terraformVersion)

    - task: AzureCLI@2
      displayName: 'Create $(displayName) Spoke Plan'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "|) Creating $(displayName) spoke infrastructure plan..."
          cd workspaces/spokes/$(environmentName)
          
          # Initialize Terraform
          terraform init
          
          # Create plan with detailed output
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          PLAN_FILE="$(environmentName)_plan_${TIMESTAMP}.out"
          
          terraform plan \
            -detailed-exitcode \
            -out="${PLAN_FILE}" \
            -lock=true \
            -lock-timeout=300s
          
          PLAN_EXIT_CODE=$?
          
          # Generate human-readable plan
          terraform show -no-color "${PLAN_FILE}" > "$(environmentName)_plan_${TIMESTAMP}.txt"
          terraform show -json "${PLAN_FILE}" > "$(environmentName)_plan_${TIMESTAMP}.json"
          
          case $PLAN_EXIT_CODE in
            0)
              echo ":) No changes detected for $(displayName) spoke infrastructure"
              ;;
            1)
              echo ":( $(displayName) spoke plan failed with errors"
              exit 1
              ;;
            2)
              echo ":) Changes detected for $(displayName) spoke infrastructure"
              echo "Plan summary:"
              terraform show -no-color "${PLAN_FILE}" | grep -E "Plan:|Changes to Outputs:" || true
              ;;
          esac

    - task: PublishPipelineArtifact@1
      displayName: 'Publish $(displayName) Spoke Plan'
      inputs:
        targetPath: 'workspaces/spokes/$(environmentName)/'
        artifact: '$(environmentName)-spoke-plan'

#================================================
# PLAN ANALYSIS STAGE
#================================================
- stage: PlanAnalysis
  displayName: 'Plan Analysis and Security Review'
  dependsOn:
  - PlanHub
  - PlanManagement
  - PlanSpokes
  condition: succeeded()
  jobs:
  - job: SecurityAnalysis
    displayName: 'Security Analysis of Plans'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download All Plans'
      inputs:
        artifactName: 'hub-plan'
        targetPath: '$(Pipeline.Workspace)/plans/hub'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'management-plan'
        targetPath: '$(Pipeline.Workspace)/plans/management'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'dev-spoke-plan'
        targetPath: '$(Pipeline.Workspace)/plans/dev'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'staging-spoke-plan'
        targetPath: '$(Pipeline.Workspace)/plans/staging'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'prod-spoke-plan'
        targetPath: '$(Pipeline.Workspace)/plans/prod'

    - script: |
        echo ":) Analyzing Terraform plans for security issues..."
        
        # Install security tools
        pip install checkov
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        
        # Analyze JSON plans with checkov
        echo "Running Checkov analysis on plans..."
        find $(Pipeline.Workspace)/plans -name "*.json" -exec checkov -f {} --framework terraform_plan \; || true
        
        echo ":) Security analysis completed"
      displayName: 'Analyze Plans for Security'

  - job: CostEstimation
    displayName: 'Cost Estimation'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo ":) Estimating infrastructure costs..."
        echo ""
        echo "|) Free Tier Usage Estimation:"
        echo "   • VM Hours: Up to 2250 hours/month (750 per environment)"
        echo "   • Storage: 5GB blob + 1GB file storage"
        echo "   • Database: SQL S0 tier (31 DTU days)"
        echo "   • Networking: 15GB outbound data transfer"
        echo "   • Key Vault: 10,000 operations"
        echo ""
        echo ":| Monitor usage to stay within free tier limits"
        echo ":) Consider reserved instances for production workloads"
      displayName: 'Estimate Infrastructure Costs'

#================================================
# PLAN SUMMARY STAGE
#================================================
- stage: PlanSummary
  displayName: 'Plan Summary and Next Steps'
  dependsOn: PlanAnalysis
  condition: succeeded()
  jobs:
  - job: GenerateSummary
    displayName: 'Generate Plan Summary'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "|) Terraform Planning Summary"
        echo "================================"
        echo ""
        echo ":) All infrastructure plans created successfully!"
        echo ""
        echo "|) Generated Plans:"
        echo "   • Hub Infrastructure Plan"
        echo "   • Management Infrastructure Plan"
        echo "   • Development Spoke Plan"
        echo "   • Staging Spoke Plan"
        echo "   • Production Spoke Plan"
        echo ""
        echo ":) Security Analysis: Completed"
        echo ":) Cost Estimation: Reviewed"
        echo ""
        echo ":) Next Steps:"
        echo "   1. Review plan artifacts in pipeline"
        echo "   2. Run apply pipeline to deploy changes"
        echo "   3. Or use destroy pipeline if cleanup needed"
        echo ""
        echo ":| Important Notes:"
        echo "   • Plans are time-sensitive - apply soon after creation"
        echo "   • Production changes require manual approval"
        echo "   • Monitor free tier usage during deployment"
      displayName: 'Plan Summary Report'
