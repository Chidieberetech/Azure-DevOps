# Terraform Plan Template
# Reusable template for creating Terraform plans across workspaces

parameters:
  - name: workspacePath
    type: string
  - name: environmentName
    type: string
  - name: serviceConnection
    type: string
  - name: terraformVersion
    type: string
    default: '1.5.7'
  - name: planTimeout
    type: string
    default: '300s'

steps:
- task: TerraformInstaller@0
  displayName: 'Install Terraform $(terraformVersion)'
  inputs:
    terraformVersion: ${{ parameters.terraformVersion }}

- task: DownloadPipelineArtifact@2
  displayName: 'Download ${{ parameters.environmentName }} Terraform Cache'
  inputs:
    artifactName: '${{ parameters.environmentName }}-terraform-cache'
    targetPath: '${{ parameters.workspacePath }}/.terraform'
  condition: succeeded()
  continueOnError: true

- task: AzureCLI@2
  displayName: 'Create ${{ parameters.environmentName }} Terraform Plan'
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "|) Creating ${{ parameters.environmentName }} infrastructure plan..."
      cd ${{ parameters.workspacePath }}
      
      # Re-initialize if cache download failed
      terraform init
      
      # Generate timestamp for plan file
      TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
      PLAN_FILE="${{ parameters.environmentName }}_plan_${TIMESTAMP}.out"
      
      # Create plan with detailed output
      terraform plan \
        -detailed-exitcode \
        -out="${PLAN_FILE}" \
        -lock=true \
        -lock-timeout=${{ parameters.planTimeout }}
      
      PLAN_EXIT_CODE=$?
      
      # Generate human-readable and JSON plans
      terraform show -no-color "${PLAN_FILE}" > "${{ parameters.environmentName }}_plan_${TIMESTAMP}.txt"
      terraform show -json "${PLAN_FILE}" > "${{ parameters.environmentName }}_plan_${TIMESTAMP}.json"
      
      # Analyze plan results
      case $PLAN_EXIT_CODE in
        0)
          echo ":) No changes detected for ${{ parameters.environmentName }} infrastructure"
          echo "PLAN_STATUS=no-changes" >> $GITHUB_ENV
          ;;
        1)
          echo ":( ${{ parameters.environmentName }} plan failed with errors"
          exit 1
          ;;
        2)
          echo ":) Changes detected for ${{ parameters.environmentName }} infrastructure"
          echo "PLAN_STATUS=changes-detected" >> $GITHUB_ENV
          
          # Show plan summary
          echo "|) Plan Summary:"
          terraform show -no-color "${PLAN_FILE}" | grep -E "Plan:|Changes to Outputs:" || true
          
          # Count resources
          ADD_COUNT=$(terraform show -json "${PLAN_FILE}" | jq '.resource_changes[] | select(.change.actions[] == "create") | .address' | wc -l)
          CHANGE_COUNT=$(terraform show -json "${PLAN_FILE}" | jq '.resource_changes[] | select(.change.actions[] == "update") | .address' | wc -l)
          DELETE_COUNT=$(terraform show -json "${PLAN_FILE}" | jq '.resource_changes[] | select(.change.actions[] == "delete") | .address' | wc -l)
          
          echo "|) Resource Changes:"
          echo "   To add: $ADD_COUNT"
          echo "   To change: $CHANGE_COUNT"
          echo "   To destroy: $DELETE_COUNT"
          ;;
      esac
      
      echo "Plan files created:"
      echo "  - Binary plan: ${PLAN_FILE}"
      echo "  - Text plan: ${{ parameters.environmentName }}_plan_${TIMESTAMP}.txt"
      echo "  - JSON plan: ${{ parameters.environmentName }}_plan_${TIMESTAMP}.json"

- task: PublishPipelineArtifact@1
  displayName: 'Publish ${{ parameters.environmentName }} Plan Artifacts'
  inputs:
    targetPath: '${{ parameters.workspacePath }}'
    artifact: '${{ parameters.environmentName }}-plan-artifacts'
